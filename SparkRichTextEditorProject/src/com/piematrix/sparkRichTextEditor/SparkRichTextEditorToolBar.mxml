<?xml version="1.0" encoding="utf-8"?>
<!--
* Copyright (c) 2012 PIEmatrix Corporation
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
-->
<s:HGroup gap="6" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:sparkColorPicker="com.piematrix.sparkRichTextEditor.tools.sparkColorPicker.*" xmlns:sparkRichTextEditor="com.piematrix.sparkRichTextEditor.*"
		  xmlns:tools="com.piematrix.sparkRichTextEditor.tools.*">
	<fx:Metadata>
		[Event(name="linkSelectedChange", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import spark.components.TextArea;

			[Bindable]
			/**
			 * A list of fonts for the font dropdown
			 */
			public var fonts:IList = null;

			[Bindable]
			/**
			 * A list of sizes for the size dropdown
			 */
			public var sizes:IList = null;

			private var _linkSelected:Boolean = false;
			private var _textArea:TextArea;

			[Bindable("linkSelectedChange")]
			/**
			 *  True if a link is currently selected
			 */
			public function get linkSelected():Boolean
			{
				return _linkSelected;
			}

			/**
			 * The textArea that this toolbar is controlling
			 */
			[Bindable]
			public function get textArea():TextArea
			{
				return _textArea;
			}

			/**
			 *  @private
			 */
			public function set textArea(value:TextArea):void
			{
				_textArea = value;
			}

			/**
			 *  @private
			 */
			private function handleLinkSelectedChange(e:Event):void
			{
				_linkSelected = (e.currentTarget as LinkTool).linkSelected;
				this.dispatchEvent(new Event("linkSelectedChange"));
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<tools:FontTool dataProvider="{fonts}" textArea="{textArea}"/>
	<tools:SizeTool dataProvider="{sizes}" textArea="{textArea}"/>
	<s:HGroup gap="0">
		<tools:BoldTool textArea="{textArea}"/>
		<tools:ItalicTool textArea="{textArea}"/>
		<tools:UnderlineTool textArea="{textArea}"/>
	</s:HGroup>
	<tools:ColorTool textArea="{textArea}"/>
	<s:Line height="100%">
		<s:stroke>
			<s:SolidColorStroke color="#B3C2B8"/>
		</s:stroke>
	</s:Line>
	<tools:AlignTool textArea="{textArea}"/>
	<tools:BulletTool textArea="{textArea}"/>
	<s:Line height="100%">
		<s:stroke>
			<s:SolidColorStroke color="#B3C2B8"/>
		</s:stroke>
	</s:Line>
	<tools:LinkTool linkSelectedChange="handleLinkSelectedChange(event)" textArea="{textArea}"/>
</s:HGroup>
