<?xml version="1.0" encoding="utf-8"?>
<s:ToggleButton width="20" click="handleClick(event);" icon="{BULLET_IMAGE}" mouseFocusEnabled="false" toolTip="Bullet points" xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Script>
		<![CDATA[
			import flash.text.engine.FontWeight;
			import flashx.textLayout.edit.IEditManager;
			import flashx.textLayout.edit.SelectionState;
			import flashx.textLayout.elements.FlowGroupElement;
			import flashx.textLayout.elements.FlowLeafElement;
			import flashx.textLayout.elements.ListElement;
			import flashx.textLayout.formats.TextLayoutFormat;
			import mx.events.FlexEvent;
			import spark.components.TextArea;
			import spark.events.TextOperationEvent;

			[Embed(source = "/images/textToolBar/bullet.png")]
			private const BULLET_IMAGE:Class;

			private var _textArea:TextArea;

			public function get textArea():TextArea
			{
				return _textArea;
			}

			public function set textArea(value:TextArea):void
			{
				if (_textArea)
				{
					_textArea.removeEventListener(FlexEvent.SELECTION_CHANGE, handleSelectionChange);
				}
				_textArea = value;
				if (_textArea)
				{
					_textArea.addEventListener(FlexEvent.SELECTION_CHANGE, handleSelectionChange, false, 0, true);
					handleSelectionChange();
				}
			}

			protected function handleClick(e:MouseEvent):void
			{
				if (_textArea.textFlow && _textArea.textFlow.interactionManager is IEditManager)
				{
					var editManager:IEditManager = IEditManager(_textArea.textFlow.interactionManager);
					var doCreate:Boolean = true;
					var selectionState:SelectionState = editManager.getSelectionState();
					var startleaf:FlowLeafElement = _textArea.textFlow.findLeaf(selectionState.absoluteStart);
					var endleaf:FlowLeafElement = _textArea.textFlow.findLeaf(selectionState.absoluteEnd);
					selectionState.absoluteStart = startleaf.getAbsoluteStart();
					selectionState.absoluteEnd = endleaf.getAbsoluteStart() + endleaf.parentRelativeEnd - endleaf.parentRelativeStart;
					var listElements:Array = _textArea.textFlow.getElementsByTypeName("list");
					for each (var listElement:ListElement in listElements)
					{
						var start:int = listElement.getAbsoluteStart();
						var end:int = listElement.getAbsoluteStart() + listElement.parentRelativeEnd - listElement.parentRelativeStart;
						if (selectionState.absoluteStart == start && selectionState.absoluteEnd == end)
						{ //Same
							removeList(listElement);
							doCreate = false;
							break;
						}
						else if (selectionState.absoluteStart == start && selectionState.absoluteEnd <= end)
						{ //Inside touching start
							selectionState = new SelectionState(_textArea.textFlow, end, selectionState.absoluteEnd);
							removeList(listElement);
							editManager.createList(null, null, selectionState);
							doCreate = false;
							break;
						}
						else if (selectionState.absoluteStart >= start && selectionState.absoluteEnd == end)
						{ //Inside touching end
							selectionState = new SelectionState(_textArea.textFlow, selectionState.absoluteStart, start);
							removeList(listElement);
							editManager.createList(null, null, selectionState);
							doCreate = false;
							break;
						}
						else if (selectionState.absoluteStart >= start && selectionState.absoluteEnd <= end)
						{ //Inside
							var firstRange:SelectionState = new SelectionState(_textArea.textFlow, selectionState.absoluteStart, start);
							var secondRange:SelectionState = new SelectionState(_textArea.textFlow, end, selectionState.absoluteEnd);
							removeList(listElement);
							editManager.createList(null, null, firstRange);
							editManager.createList(null, null, secondRange);
							doCreate = false;
							break;
						}
						else if ((selectionState.absoluteStart >= start && selectionState.absoluteStart <= end) || (selectionState.absoluteEnd >= start && selectionState.absoluteEnd <= end))
						{ //Overlap. Include this list in the selection
							selectionState = new SelectionState(_textArea.textFlow, Math.min(start, selectionState.absoluteStart), Math.max(end, selectionState.absoluteEnd));
							removeList(listElement);
						}
						else if (selectionState.absoluteStart <= start && selectionState.absoluteEnd >= end)
						{ //surround. Remove this list since it will get added back in, only expanded.
							removeList(listElement);
						}
					}
					if (doCreate)
					{
						IEditManager(_textArea.textFlow.interactionManager).createList(null, null, selectionState);
					}
					_textArea.textFlow.interactionManager.setFocus();
				}
			}

			protected function removeList(listElement:ListElement):void
			{
				var editManager:IEditManager = IEditManager(_textArea.textFlow.interactionManager);

				var target:FlowGroupElement = listElement.parent;
				var targetIndex:int = target.getChildIndex(listElement);
				editManager.moveChildren(listElement, 0, listElement.numChildren, target, targetIndex);
			}

			private function handleSelectionChange(e:FlexEvent = null):void
			{
				//var format:TextLayoutFormat = _textArea.getFormatOfRange(null, _textArea.selectionAnchorPosition, _textArea.selectionActivePosition);
				this.selected = false;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:ToggleButton>
