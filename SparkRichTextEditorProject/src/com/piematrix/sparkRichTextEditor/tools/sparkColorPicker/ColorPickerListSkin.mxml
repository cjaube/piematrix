<!--

<?xml version="1.0" encoding="utf-8"?>
	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->
<!--- The default skin class for the Spark DropDownList component.
	  The skin for the anchor button for a DropDownList component
	  is defined by the DropDownListButtonSkin class.

	  <p>In a custom skin class that uses transitions, set the
	  <code>itemDestructionPolicy</code> property to <code>none</code>
	  for the PopUpAnchor defined by the popUp property.</p>

	  @see spark.components.DropDownList
	  @see spark.skins.spark.DropDownListButtonSkin

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkSkin alpha.disabled=".5" currentStateChange="if (currentState == 'open') prepOpenState()" minWidth="24" xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:local="*" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:sparkColorPicker="com.piematrix.sparkRichTextEditor.tools.sparkColorPicker.*">

	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ComboBox")]
    ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import spark.components.ComboBox;
			import spark.events.IndexChangeEvent;

			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			private static const contentFill:Array = ["bgFill"];

			/**
			 * @private
			 */
			public override function get contentItems():Array
			{
				return contentFill;
			}

			/**
			* @private
			*/
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == false)
				{
					if (border)
						border.visible = false;
					if (background)
					{
						background.left = background.top = background.right = background.bottom = 0;
					}
					if (swatchpanel)
					{
						swatchpanel.left = swatchpanel.top = swatchpanel.right = swatchpanel.bottom = 0;
					}
				}
				else
				{
					if (border)
						border.visible = true;
					if (background)
					{
						background.left = background.top = background.right = background.bottom = 1;
					}
					if (swatchpanel)
					{
						swatchpanel.left = swatchpanel.top = swatchpanel.right = swatchpanel.bottom = 1;
					}
				}

				if (dropShadow)
					dropShadow.visible = getStyle("dropShadowVisible");

				openButton.setStyle("cornerRadius", getStyle("cornerRadius"));

				if (borderStroke)
				{
					borderStroke.color = getStyle("borderColor");
					borderStroke.alpha = getStyle("borderAlpha");
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			private function handleEnter():void
			{
				hostComponent.selectedItem = previewColor.color;
				hostComponent.closeDropDown(true);
				hostComponent.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
			}

			private function prepOpenState():void
			{
				if (preview)
					previewColor.color = hostComponent.selectedItem as uint;
				ti.callLater(ti.setFocus);
				ti.text = previewColor.color.toString(16);
			}
			;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="open"/>
		<s:State name="disabled"/>
	</s:states>

	<!---
		The PopUpAnchor control that opens the drop-down list.

		<p>In a custom skin class that uses transitions, set the
		<code>itemDestructionPolicy</code> property to <code>none</code>.</p>
	-->
	<s:PopUpAnchor id="popUp" bottom="0" displayPopUp.normal="false" displayPopUp.open="true" includeIn="open" itemDestructionPolicy="auto" left="0" popUpPosition="below"
				   popUpWidthMatchesAnchorWidth="false" right="0" top="0">

		<!---
			  This includes borders, background colors, scrollers, and filters.
			  @copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<sparkColorPicker:FocusGroup id="dropDown">

			<!--- @private -->
			<s:RectangularDropShadow id="dropShadow" alpha="0.45" angle="90" blurX="20" blurY="20" bottom="0" color="#000000" distance="7" left="0" right="0" top="0"/>

			<!--- @private -->
			<s:Rect id="border" bottom="0" left="0" right="0" top="0">
				<s:stroke>
					<!--- border stroke @private -->
					<s:SolidColorStroke id="borderStroke" weight="1"/>
				</s:stroke>
			</s:Rect>

			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background" bottom="1" left="1" right="1" top="1">
				<s:fill>
					<!---
						The color of the drop down's background fill.
						The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill" color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
			<s:VGroup id="swatchpanel" bottom="0" left="0" right="0" top="0">
				<s:HGroup>
					<s:Rect id="preview" height="20" width="50">
						<s:fill>
							<s:SolidColor id="previewColor"/>
						</s:fill>
					</s:Rect>
					<s:TextInput id="ti" change="previewColor.color = uint('0x' + ti.text)" enter="handleEnter()" restrict="0123456789abcdefABCDEF"/>
				</s:HGroup>
				<s:Group>
					<s:Rect height="132" width="220" bottom="0" left="0" right="0" top="0">
						<s:fill>
							<s:SolidColor color="0x0"/>
						</s:fill>
					</s:Rect>
					<s:DataGroup id="dataGroup" height="132" width="220" bottom="0" left="0" right="0" top="0">
						<s:layout>
							<s:TileLayout horizontalGap="0" requestedColumnCount="20" requestedRowCount="12" verticalGap="0"/>
						</s:layout>
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer rollOver="outerDocument.previewColor.color = uint(data); outerDocument.ti.text = data.toString(16)">
									<s:states>
										<s:State name="normal"/>
										<s:State name="hovered"/>
										<s:State name="selected"/>
									</s:states>
									<s:Rect id="swatch" height="10" width="10">
										<s:fill>
											<s:SolidColor color="{data}"/>
										</s:fill>
										<s:stroke>
											<s:SolidColorStroke alpha="0" alpha.hovered="1" color="0xFFFF00"/>
										</s:stroke>
									</s:Rect>
								</s:ItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:DataGroup>
				</s:Group>
			</s:VGroup>
		</sparkColorPicker:FocusGroup>
	</s:PopUpAnchor>

	<!---  The default skin is DropDownListButtonSkin.
			@copy spark.components.supportClasses.DropDownListBase#openButton
			@see spark.skins.spark.DropDownListButtonSkin -->
	<s:Button id="openButton" bottom="0" focusEnabled="false" left="0" right="0" skinClass="com.piematrix.sparkRichTextEditor.tools.sparkColorPicker.ColorPickerListButtonSkin" top="0"/>

	<!--- @copy spark.components.DropDownList#labelDisplay -->
	<s:TextInput id="textInput" width="0" bottom="0" left="0" skinClass="spark.skins.spark.ComboBoxTextInputSkin" top="0" visible="false"/>

	<s:Rect id="currentColor" height="20" width="20" bottom="2" left="2" radiusX="2" right="2" top="2">
		<s:fill>
			<s:SolidColor id="current"/>
		</s:fill>
	</s:Rect>

</s:SparkSkin>
